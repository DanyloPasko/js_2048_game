{"version":3,"sources":["scripts/main.js"],"names":["mainButton","document","querySelector","messageContainer","querySelectorAll","fieldCell","messageStart","messageLose","messageWin","gameScoreElement","gameStarted","score","restartGame","forEach","cell","innerHTML","className","removeAttribute","updateGameScore","createCells","startGame","classList","add","remove","textContent","getRandomIndexes","length","index","random","newClass","newValue","Math","floor","textNode","createTextNode","appendChild","count","max","indexes","Set","size","randomIndex","Array","from","moveCells","key","preventDefault","moveUp","moveDown","moveLeft","moveRight","checkAvailableMoves","gameOver","row","column","currentCell","value","checkWin","some","win","generateNewCell","emptyCellIndexes","c","push","targetRow","targetCell","targetValue","parseInt","toString","targetColumn","element","style","visibility","addEventListener","contains"],"mappings":"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","file":"main.305ad534.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst mainButton = document.querySelector('.button');\nconst messageContainer = document.querySelectorAll('.message-container');\nconst fieldCell = document.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScoreElement = document.querySelector('.game-score');\n\nlet gameStarted = false;\nlet score = 0;\n\nmainButton.addEventListener('click', () => {\n  messageContainer.forEach((element) => {\n    element.style.visibility = 'hidden';\n  });\n\n  if (mainButton.classList.contains('restart')) {\n    restartGame();\n  } else {\n    startGame();\n  }\n});\n\nfunction restartGame() {\n  fieldCell.forEach((cell) => {\n    cell.innerHTML = '';\n    cell.className = 'field-cell';\n  });\n\n  mainButton.removeAttribute('tabindex');\n\n  score = 0;\n  gameStarted = true;\n  updateGameScore();\n  createCells();\n}\n\nfunction startGame() {\n  mainButton.classList.add('restart');\n  mainButton.classList.remove('start');\n  mainButton.textContent = 'Restart';\n  mainButton.removeAttribute('tabindex');\n  gameStarted = true;\n  createCells();\n}\n\nfunction createCells() {\n  const randomIndexes = getRandomIndexes(2, fieldCell.length);\n\n  randomIndexes.forEach((index) => {\n    const random = Math.floor(Math.random() * 11);\n    let newClass = 'field-cell--2';\n    let newValue = '2';\n\n    if (random === 1) {\n      newClass = 'field-cell--4';\n      newValue = '4';\n    }\n\n    const cell = fieldCell[index];\n\n    cell.classList.add(newClass);\n\n    const textNode = document.createTextNode(newValue);\n\n    cell.appendChild(textNode);\n  });\n}\n\nfunction getRandomIndexes(count, max) {\n  const indexes = new Set();\n\n  while (indexes.size < count) {\n    const randomIndex = Math.floor(Math.random() * max);\n\n    indexes.add(randomIndex);\n  }\n\n  return Array.from(indexes);\n}\n\ndocument.addEventListener('keydown', moveCells);\n\nfunction moveCells(key) {\n  key.preventDefault();\n\n  if (!gameStarted) {\n    return;\n  }\n\n  if (key.key === 'ArrowUp') {\n    moveUp();\n  }\n\n  if (key.key === 'ArrowDown') {\n    moveDown();\n  }\n\n  if (key.key === 'ArrowLeft') {\n    moveLeft();\n  }\n\n  if (key.key === 'ArrowRight') {\n    moveRight();\n  }\n\n  if (!checkAvailableMoves()) {\n    gameOver();\n  }\n}\n\nfunction checkAvailableMoves() {\n  for (let row = 0; row < 4; row++) {\n    for (let column = 0; column < 4; column++) {\n      const currentCell = fieldCell[row * 4 + column];\n      const value = currentCell.innerHTML;\n\n      if (column < 3) {\n        const rightCell = fieldCell[row * 4 + column + 1];\n\n        if (value === rightCell.innerHTML) {\n          return true;\n        }\n      }\n\n      if (row < 3) {\n        const bottomCell = fieldCell[(row + 1) * 4 + column];\n\n        if (value === bottomCell.innerHTML) {\n          return true;\n        }\n      }\n\n      if (value === '') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkWin() {\n  const hasWinningValue\n  = Array.from(fieldCell).some((cell) => cell.innerHTML === '2048');\n\n  if (hasWinningValue) {\n    win();\n  }\n}\n\nfunction generateNewCell() {\n  const emptyCellIndexes = [];\n\n  fieldCell.forEach((c, index) => {\n    if (c.innerHTML === '') {\n      emptyCellIndexes.push(index);\n    }\n  });\n\n  if (emptyCellIndexes.length === 0) {\n    return;\n  }\n\n  const randomIndex\n  = emptyCellIndexes[Math.floor(Math.random() * emptyCellIndexes.length)];\n  const random = Math.floor(Math.random() * 11);\n  let newClass = 'field-cell--2';\n  let newValue = '2';\n\n  if (random === 1) {\n    newClass = 'field-cell--4';\n    newValue = '4';\n  }\n\n  const cell = fieldCell[randomIndex];\n\n  cell.classList.add(newClass);\n\n  const textNode = document.createTextNode(newValue);\n\n  cell.appendChild(textNode);\n\n  updateGameScore();\n}\n\nfunction moveUp() {\n  for (let column = 0; column < 4; column++) {\n    for (let row = 1; row < 4; row++) {\n      let currentCell = fieldCell[row * 4 + column];\n      const value = currentCell.innerHTML;\n\n      if (value === '') {\n        continue;\n      }\n\n      let targetRow = row - 1;\n\n      while (targetRow >= 0) {\n        const targetCell = fieldCell[targetRow * 4 + column];\n        const targetValue = targetCell.innerHTML;\n\n        if (targetValue === '') {\n          targetCell.innerHTML = value;\n          targetCell.className = currentCell.className;\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          currentCell = targetCell;\n          targetRow--;\n        } else if (targetValue === value) {\n          const newValue = parseInt(value) * 2;\n\n          targetCell.innerHTML = newValue.toString();\n          targetCell.classList.remove(`field-cell--${value}`);\n          targetCell.classList.add(`field-cell--${newValue}`);\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          score += newValue;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  generateNewCell();\n  checkWin();\n  updateGameScore();\n}\n\nfunction moveDown() {\n  for (let column = 0; column < 4; column++) {\n    for (let row = 2; row >= 0; row--) {\n      let currentCell = fieldCell[row * 4 + column];\n      const value = currentCell.innerHTML;\n\n      if (value === '') {\n        continue;\n      }\n\n      let targetRow = row + 1;\n\n      while (targetRow < 4) {\n        const targetCell = fieldCell[targetRow * 4 + column];\n        const targetValue = targetCell.innerHTML;\n\n        if (targetValue === '') {\n          targetCell.innerHTML = value;\n          targetCell.className = currentCell.className;\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          currentCell = targetCell;\n          targetRow++;\n        } else if (targetValue === value) {\n          const newValue = parseInt(value) * 2;\n\n          targetCell.innerHTML = newValue.toString();\n          targetCell.classList.remove(`field-cell--${value}`);\n          targetCell.classList.add(`field-cell--${newValue}`);\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          score += newValue;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  generateNewCell();\n  checkWin();\n  updateGameScore();\n}\n\nfunction moveLeft() {\n  for (let row = 0; row < 4; row++) {\n    for (let column = 1; column < 4; column++) {\n      let currentCell = fieldCell[row * 4 + column];\n      const value = currentCell.innerHTML;\n\n      if (value === '') {\n        continue;\n      }\n\n      let targetColumn = column - 1;\n\n      while (targetColumn >= 0) {\n        const targetCell = fieldCell[row * 4 + targetColumn];\n        const targetValue = targetCell.innerHTML;\n\n        if (targetValue === '') {\n          targetCell.innerHTML = value;\n          targetCell.className = currentCell.className;\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          currentCell = targetCell;\n          targetColumn--;\n        } else if (targetValue === value) {\n          const newValue = parseInt(value) * 2;\n\n          targetCell.innerHTML = newValue.toString();\n          targetCell.classList.remove(`field-cell--${value}`);\n          targetCell.classList.add(`field-cell--${newValue}`);\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          score += newValue;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  generateNewCell();\n  checkWin();\n  updateGameScore();\n}\n\nfunction moveRight() {\n  for (let row = 0; row < 4; row++) {\n    for (let column = 2; column >= 0; column--) {\n      let currentCell = fieldCell[row * 4 + column];\n      const value = currentCell.innerHTML;\n\n      if (value === '') {\n        continue;\n      }\n\n      let targetColumn = column + 1;\n\n      while (targetColumn < 4) {\n        const targetCell = fieldCell[row * 4 + targetColumn];\n        const targetValue = targetCell.innerHTML;\n\n        if (targetValue === '') {\n          targetCell.innerHTML = value;\n          targetCell.className = currentCell.className;\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          currentCell = targetCell;\n          targetColumn++;\n        } else if (targetValue === value) {\n          const newValue = parseInt(value) * 2;\n\n          targetCell.innerHTML = newValue.toString();\n          targetCell.classList.remove(`field-cell--${value}`);\n          targetCell.classList.add(`field-cell--${newValue}`);\n          currentCell.innerHTML = '';\n          currentCell.className = 'field-cell';\n          score += newValue;\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  generateNewCell();\n  checkWin();\n  updateGameScore();\n}\n\nfunction updateGameScore() {\n  gameScoreElement.textContent = score.toString();\n}\n\nfunction gameOver() {\n  messageContainer.forEach((element) => {\n    element.style.visibility = 'visible';\n  });\n  messageStart.classList.add('hidden');\n  messageLose.classList.remove('hidden');\n}\n\nfunction win() {\n  messageContainer.forEach((element) => {\n    element.style.visibility = 'visible';\n  });\n  messageStart.classList.add('hidden');\n  messageWin.classList.remove('hidden');\n}\n"]}